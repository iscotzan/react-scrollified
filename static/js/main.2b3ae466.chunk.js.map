{"version":3,"sources":["../../src/react-scrollified/react-scrollified.tsx","../../src/helper/invert-color.ts","../../src/index.tsx","../../src/helper/random-color.ts","App.tsx","index.tsx"],"names":["ReactScrollified","isLoading","page","childrenCount","loadCount","componentDidUpdate","React","this","props","prevProps","handleIntersection","console","event","state","render","options","onChange","bind","root","className","externalListWrapperClassName","id","style","scrollDirection","overflowX","overflowY","height","Component","padZero","str","len","Array","join","invertColor","hex","bw","Error","r","parseInt","g","b","loader","width","textAlign","ExampleComponent","useState","items","setItems","containerBackgroundColor","setContainerBackgroundColor","useEffect","loadMore","offset","start","newData","step","Math","stop","x","y","setTimeout","maxWidth","margin","borderRadius","border","padding","fontSize","background","hasMore","boxColor","numOfSteps","h","i","f","q","rainbow","index","display","justifyContent","boxShadow","cursor","key","onClick","flexDirection","App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.2b3ae466.chunk.js","sourcesContent":["import React from 'react'\nimport 'intersection-observer' // optional polyfill\nimport Observer from '@researchgate/react-intersection-observer'\n\ninterface ReactScrollifiedProps {\n  loader: React.ReactNode\n  hasMore: boolean\n  offset?: number\n  loadMore: (page: number) => void\n  scrollDirection?: 'vertical' | 'horizontal'\n  externalListWrapperClassName?: string\n}\n\ninterface ReactScrollifiedState {\n  page: number\n  childrenCount: number\n  loadCount: number\n  isLoading: boolean\n}\n\nclass ReactScrollified extends React.Component<ReactScrollifiedProps,\n  ReactScrollifiedState> {\n  private isLoading: boolean = false\n\n  constructor(props: ReactScrollifiedProps) {\n    super(props)\n    this.state = {\n      page: 0,\n      childrenCount: 0,\n      loadCount: 0,\n      isLoading: false\n    }\n  }\n\n  componentDidUpdate(prevProps: Readonly<any>) {\n    if (\n      React.Children.count(this.props.children) !==\n      React.Children.count(prevProps.children)\n    ) {\n      this.isLoading = false\n    }\n  }\n\n  handleIntersection(event: any) {\n    console.log(event.isIntersecting, 'current page -> ', this.state.page)\n    if (event.isIntersecting && this.props.hasMore && !this.isLoading) {\n      this.isLoading = true\n      this.setState(\n        {\n          page: this.state.page + 1,\n          loadCount: this.state.loadCount + 1\n        },\n        () => {\n          this.props.loadMore(this.state.page - 1)\n        }\n      )\n    }\n  }\n\n  render() {\n    const options = {\n      onChange: this.handleIntersection.bind(this),\n      root: '#rsc-container'\n    }\n    const containerHeight = '100%' // window.innerHeight\n    const className = this.props.externalListWrapperClassName ? this.props.externalListWrapperClassName : 'rsc-container'\n    return (\n      <div\n        id='rsc-container'\n        className={className}\n        style={\n          this.props.scrollDirection === 'horizontal'\n            ? { overflowX: 'scroll' }\n            : {\n              overflowY: 'auto',\n              height: containerHeight\n            }\n        }\n      >\n        {this.props.children}\n        <Observer {...options}>\n          <div className='rsc-loader-wrapper'>{this.props.loader}</div>\n        </Observer>\n      </div>\n    )\n  }\n}\n\nexport default ReactScrollified\n","export const padZero = (str: string, len = 2) => {\n  len = len || 2\n  var zeros = new Array(len).join('0')\n  return (zeros + str).slice(-len)\n}\n\nexport const invertColor = (hex: string, bw: any = false) => {\n  if (hex.indexOf('#') === 0) {\n    hex = hex.slice(1)\n  }\n  // convert 3-digit hex to 6-digits.\n  if (hex.length === 3) {\n    hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2]\n  }\n  if (hex.length !== 6) {\n    throw new Error('Invalid HEX color.')\n  }\n  let r: any = parseInt(hex.slice(0, 2), 16),\n    g: any = parseInt(hex.slice(2, 4), 16),\n    b: any = parseInt(hex.slice(4, 6), 16)\n  if (bw) {\n    // http://stackoverflow.com/a/3943023/112731\n    return (r * 0.299 + g * 0.587 + b * 0.114) > 186\n      ? '#000000'\n      : '#FFFFFF'\n  }\n  // invert color components\n  r = (255 - r).toString(16)\n  g = (255 - g).toString(16)\n  b = (255 - b).toString(16)\n  // pad each with zeros and return\n  return '#' + padZero(r) + padZero(g) + padZero(b)\n}\n","import * as React from 'react'\nimport ReactScrollified from './react-scrollified/react-scrollified'\nimport { useEffect, useState } from 'react'\nimport { rainbow } from './helper/random-color'\nimport { invertColor } from './helper/invert-color'\n\nconst loader = <div style={{ width: '100%', textAlign: 'center' }}>Loading...</div>\n\nconst range = (start: number, stop: number, step = 1) =>\n  Array(Math.ceil((stop - start) / step))\n    .fill(start)\n    .map((x, y) => x + y * step)\n\nexport const ExampleComponent = () => {\n  const [items, setItems] = useState<any>([])\n  const [containerBackgroundColor, setContainerBackgroundColor] = useState<any>('#fff')\n  useEffect(() => {\n    loadMore(0)\n  }, [])\n\n  const loadMore = (page: number) => {\n    const limit = 30\n    const offset = page * limit\n    console.log('load more', page)\n    const newData = range(offset, offset + limit)\n    setTimeout(() => {\n      setItems([...items, ...newData])\n    }, 400)\n  }\n\n  return (\n    <div style={{\n      height: '500px',\n      maxWidth: '1000px',\n      textAlign: 'center',\n      margin: '2.5em auto',\n      borderRadius: '37.25px 37.25px 37.25px 37.25px',\n      border: `3px solid ${invertColor(containerBackgroundColor)}`,\n      padding: '0.5em',\n      fontSize: '2em',\n      background: containerBackgroundColor\n    }}>\n      <ReactScrollified\n        hasMore={true}\n        loader={loader}\n        externalListWrapperClassName={'list-wrapper'}\n        loadMore={(page: number) => loadMore(page)}>\n        {items.map((item: any, index: any) => {\n            const boxColor = rainbow(1618, index * 10)\n            return (\n              <div style={{\n                height: '168px',\n                width: '168px',\n                display: 'inline-flex',\n                justifyContent: 'flex-start',\n                margin: '1rem',\n                padding: '1rem',\n                borderRadius: '29% 71% 70% 30% / 32% 35% 65% 68% ',\n                boxShadow: `inset 0 0 7px ${invertColor(boxColor)}`,\n                background: boxColor,\n                textAlign: 'left',\n                cursor: 'pointer'\n              }}\n                   key={index}\n                   onClick={() => setContainerBackgroundColor(boxColor)}\n              >\n              <span\n                style={{\n                  display: 'flex',\n                  flexDirection: 'column',\n                  justifyContent: 'center',\n                  textAlign: 'center',\n                  width: '100%'\n                }}>{item}\n              </span>\n              </div>)\n          }\n        )}\n      </ReactScrollified>\n    </div>\n  )\n}\n","export const rainbow = (numOfSteps:number, step:number) => {\n  // This function generates vibrant, \"evenly spaced\" colours (i.e. no clustering). This is ideal for creating easily distinguishable vibrant markers in Google Maps and other apps.\n  // Adam Cole, 2011-Sept-14\n  // HSV to RBG adapted from: http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript\n  let r, g, b;\n  let h = step / numOfSteps;\n  let i = ~~(h * 6);\n  let f = h * 6 - i;\n  let q = 1 - f;\n  switch(i % 6){\n    case 0: r = 1; g = f; b = 0; break;\n    case 1: r = q; g = 1; b = 0; break;\n    case 2: r = 0; g = 1; b = f; break;\n    case 3: r = 0; g = q; b = 1; break;\n    case 4: r = f; g = 0; b = 1; break;\n    case 5: r = 1; g = 0; b = q; break;\n  }\n  // @ts-ignore\n  let c = \"#\" + (\"00\" + (~ ~(r * 255)).toString(16)).slice(-2) + (\"00\" + (~ ~(g * 255)).toString(16)).slice(-2) + (\"00\" + (~ ~(b * 255)).toString(16)).slice(-2);\n  return (c);\n}\n","import React from 'react'\n\n// import ReactScrollified from 'react-scrollified'\nimport { ExampleComponent } from 'react-scrollified'\nimport 'react-scrollified/dist/index.css'\n\n// const mode: 'example' | 'live' = 'example'\n\nconst App = () => {\n  // if(mode === 'example'){\n  //  return (<ExampleComponent/>)\n  // }\n  return  <ExampleComponent/>\n  // @ts-ignore\n  // return <ReactScrollified/>\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}