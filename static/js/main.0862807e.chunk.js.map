{"version":3,"sources":["../../src/infinite-scroll/infinite-scroll.tsx","../../src/index.tsx","App.tsx","index.tsx"],"names":["constructor","props","loading","page","prevY","childrenCount","loadCount","this","IntersectionObserver","handleObserver","bind","root","rootMargin","threshold","React","prevProps","y","entities","state","curPage","loadingTextCSS","display","className","style","minHeight","ref","loadingRef","loader","ExampleComponent","useState","useEffect","loadMore","offset","console","newData","start","step","Array","Math","stop","x","range","setTimeout","setItems","styles","hasMore","items","key","index","App","ReactDOM","render","document","getElementById"],"mappings":"sVAiBA,E,kDAKEA,WAAYC,qCACV,kBAHMC,SAAA,EAIN,QAAa,CACXC,KAAM,gBADK,EAEXC,MAFW,EAGXC,cAHW,EAIXC,UAAW,GANHL,E,gEAiBVM,KAAA,SAAgB,IAAIC,qBAAqBD,KAAKE,eAAeC,KAA7C,MALA,CACdC,KADc,KAEdC,WAFc,MAGdC,UAAW,IAGbN,KAAA,iBAAsBA,KAAtB,c,yCAGgB,GACZO,mBAAqBP,KAAKN,MAA1Ba,YAA8CA,mBAAqBC,EAAvE,YACER,KAAA,c,6CAKEA,KAAJ,YACEA,KAAA,mBAAwBA,KAAxB,c,qCAIU,cACNS,EAAIC,wBAAV,GACKV,KAAKW,MAAMd,MAAQY,GAApB,IAAyBT,KAAKW,MAAMZ,YAAoBC,KAAKN,MAA7D,UAA+EM,KAAnF,UACEA,KAAA,WACAA,KAAA,SAAc,CAAED,UAAWC,KAAKW,MAAMZ,UAAY,IAAK,WACrD,WAAc,CAAED,cAAeS,mBAAqB,QAArBA,YAA6C,WAC1E,IAAMK,EAAU,QAAhB,cACA,oBACA,WAAc,CAAEhB,KAAMgB,WAIxBH,EAAJ,GACET,KAAA,SAAc,CAAEH,MAAOY,M,+BAKrB,WACEI,EAAiB,CAAEC,QAASd,KAAKL,QAAU,QAAU,QAC3D,OACE,yBAAKoB,UAAU,YAAYC,MAAO,CAAEC,UAAW,QAC5CjB,KAAKN,MADR,SAEE,yBACEwB,IAAKC,YAAU,OAAKA,SAAsB,aAAtBA,EAAqD,OAEzE,yBAAKH,MAAOH,GAAiBb,KAAKN,MANxC,c,GA1DJ,aCZM0B,EAASb,oCAAf,cAKac,EAAmB,iBACJC,mBAA1B,IAD8B,mBACxB,EADwB,KACxB,EADwB,KAE9BC,qBAAU,WACRC,OADFD,IAKA,IAAMC,EAAYC,YAChBC,2BACA,IAAMC,EAZI,SAACC,EAAD,OAA8BC,EAA9B,gEACZC,MAAMC,WAAWC,EAAD,GAAhBF,iBAAwD,qBAAUG,EAAIxB,EADxE,KAYoByB,CAAMT,EAAQA,EAA9B,KACAU,YAAW,WACTC,EAAS,GAAD,mBAAC,GAAD,YAARA,OADFD,MAIF,OAAO,+BAAKpB,UAAWsB,GACrB,+BAAKrB,MAAO,CAAEC,UAAW,UACvB,2BAAkBqB,SAAS,EAAMlB,OAAQA,EAAQI,SAAWC,YAAD,OAAYD,EAASC,KAC7Ec,OAAU,qBAA2B,+BAAKC,IAAKC,GAHtD,UCfaC,G,MAJH,WACV,OAAO,kBAAC,EAAD,QCATC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.0862807e.chunk.js","sourcesContent":["import React, { Component, ReactNode } from 'react'\n\ninterface InfiniteScrollProps {\n  loader: ReactNode\n  hasMore: boolean\n  offset?: number\n  loadMore: (page: number) => void;\n}\n\n\ninterface InfiniteScrollState {\n  page: number\n  prevY: number\n  childrenCount: number\n  loadCount: number\n}\n\nclass ReactScrollified extends Component<InfiniteScrollProps, InfiniteScrollState> {\n  private loadingRef: HTMLDivElement\n  private observer: IntersectionObserver\n  private loading: boolean = false\n\n  constructor(props: InfiniteScrollProps) {\n    super(props)\n    this.state = {\n      page: this.props.offset || 0,\n      prevY: 0,\n      childrenCount: 0,\n      loadCount: 0\n    }\n  }\n\n  componentDidMount() {\n    // Options\n    const options = {\n      root: null, // Page as root\n      rootMargin: '0px',\n      threshold: 0\n    }\n    this.observer = new IntersectionObserver(this.handleObserver.bind(this), options)\n    this.observer.observe(this.loadingRef)\n  }\n\n  componentDidUpdate(prevProps: Readonly<any>) {\n    if (React.Children.count(this.props.children) !== React.Children.count(prevProps.children)) {\n      this.loading = false\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.loadingRef) {\n      this.observer.unobserve(this.loadingRef)\n    }\n  }\n\n  handleObserver(entities: any) {\n    const y = entities[0].boundingClientRect.y\n    if ((this.state.prevY > y || this.state.loadCount === 1) && this.props.hasMore && !this.loading) {\n      this.loading = true\n      this.setState({ loadCount: this.state.loadCount + 1 }, () => {\n        this.setState({ childrenCount: React.Children.count(this.props.children) }, () => {\n          const curPage = this.state.childrenCount\n          this.props.loadMore(curPage)\n          this.setState({ page: curPage })\n        })\n      })\n    }\n    if (y > 0) {\n      this.setState({ prevY: y })\n    }\n\n  }\n\n  render() {\n    const loadingTextCSS = { display: this.loading ? 'block' : 'none' }\n    return (\n      <div className=\"container\" style={{ minHeight: '1px' }}>\n        {this.props.children}\n        <div\n          ref={loadingRef => (loadingRef !== null ? this.loadingRef = loadingRef : null)}\n        >\n          <div style={loadingTextCSS}>{this.props.loader}</div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default ReactScrollified\n","import * as React from 'react'\nimport styles from './styles.module.css'\nimport ReactScrollified from './infinite-scroll/infinite-scroll'\nimport { useEffect, useState } from 'react'\n\nconst loader = <span>Loading...</span>\n\nconst range = (start: number, stop: number, step = 1) =>\n  Array(Math.ceil((stop - start) / step)).fill(start).map((x, y) => x + y * step)\n\nexport const ExampleComponent = () => {\n  const [items, setItems] = useState<any>([])\n  useEffect(() => {\n    loadMore(0)\n  }, [])\n\n\n  const loadMore = (offset: number) => {\n    console.log('load more', offset)\n    const newData = range(offset, offset + 100)\n    setTimeout(() => {\n      setItems([...items, ...newData])\n    }, 400)\n  }\n  return <div className={styles.test}>\n    <div style={{ minHeight: '800px' }}>\n      <ReactScrollified hasMore={true} loader={loader} loadMore={(offset) => loadMore(offset)}>\n        {items.map((item: any, index: any) => <div key={index}>{item}</div>)}\n      </ReactScrollified>\n    </div>\n  </div>\n}\n","import React from 'react'\n\nimport { ExampleComponent } from 'react-scrollified'\nimport 'react-scrollified/dist/index.css'\n\nconst App = () => {\n  return <ExampleComponent />\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}